Step 1: 

Create Custom exception class and extends RuntimeException

package com.example.restservices.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {

    private String resourceName;
    private String fieldName;
    private Long fieldValue;

    public ResourceNotFoundException(String resourceName, String fieldName, Long fieldValue){
        super(String.format("%s not found with %s : '%s'", resourceName, fieldName, fieldValue));
        this.resourceName = resourceName;
        this.fieldName = fieldName;
        this.fieldValue = fieldValue;
    }
}

Step 2 : 
Use Custom exception at Service Layer

package com.example.restservices.service.impl;

import com.example.restservices.dto.UserDto;
import com.example.restservices.entity.User;
import com.example.restservices.exception.EmailAlreadyExistsException;
import com.example.restservices.exception.ResourceNotFoundException;
import com.example.restservices.mapper.AutoUserMapper;
import com.example.restservices.mapper.UserMapper;
import com.example.restservices.repo.UserRepo;
import com.example.restservices.service.UserService;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


@Service
@AllArgsConstructor
public class UserServiceImpl implements UserService {
    private UserRepo repo;
//    private ModelMapper mapper;


    @Override
    public UserDto createUser(UserDto userDto) {
        //UserDto to User JPA Entity
        //User user = UserMapper.mapToUser(userDto);
        //User user = mapper.map(userDto, User.class);

        Optional<User> optUser = repo.findByEmail(userDto.getEmail());
        if(optUser.isPresent()){
            throw new EmailAlreadyExistsException("EmailAlreadyExistsException EmailAlreadyExistsException");
        }
        User user = AutoUserMapper.MAPPER.mapToUser(userDto);

        User savedUser = repo.save(user);
        //User to UserDto JPA Entity
        //UserDto userDto1 = UserMapper.mapToUserDto(savedUser);
        //UserDto userDto1 = mapper.map(savedUser, UserDto.class);
        UserDto userDto1 = AutoUserMapper.MAPPER.mapToUserDto(savedUser);
        return userDto1;
    }

    @Override
    public UserDto getUserById(Long id) {
        User user =  repo.findById(id).orElseThrow(()->new ResourceNotFoundException(
                "User", "id", id
        ));
//      UserDto userDto = UserMapper.mapToUserDto(user);
//        UserDto userDto = mapper.map(user, UserDto.class);
        UserDto userDto = AutoUserMapper.MAPPER.mapToUserDto(user);
        return userDto;
    }

    @Override
    public List<UserDto> getAllUsers() {
        List<User> list = repo.findAll();
        List<UserDto> listdto = list.stream()
//                .map((user) -> mapper.map(user, UserDto.class))
                .map((user) -> AutoUserMapper.MAPPER.mapToUserDto(user))
                .collect(Collectors.toList());
        return listdto;
    }

    @Override
    public UserDto updateUser(Long id, UserDto userDto) {
        User savedUser =  repo.findById(id).orElseThrow(()->new ResourceNotFoundException(
                "User", "id", id
        ));
        savedUser.setFname(userDto.getFname());
        savedUser.setLname(userDto.getLname());
        savedUser.setEmail(userDto.getEmail());
        repo.save(savedUser);


//      UserDto savedDto = UserMapper.mapToUserDto(savedUser);
//        UserDto savedDto = mapper.map(savedUser, UserDto.class);
        UserDto savedDto = AutoUserMapper.MAPPER.mapToUserDto(savedUser);

        return savedDto;
    }

    @Override
    public String deleteUser(Long id) {
        repo.deleteById(id);
        return "User Successfully Deleted";
    }


}

3. Create Error Detail Class:
package com.example.restservices.exception;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class ErrorDetails {
    private LocalDateTime ts;
    private String message;
    private String path;
    private String errorCode;
}



Step 4: At Controller
package com.example.restservices.controller;

import com.example.restservices.dto.UserDto;
import com.example.restservices.entity.User;
import com.example.restservices.exception.ErrorDetails;
import com.example.restservices.exception.ResourceNotFoundException;
import com.example.restservices.service.UserService;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@AllArgsConstructor
@RequestMapping("users")
public class UserController {

    UserService service;

    @PostMapping("create")
    public ResponseEntity<UserDto> createMyUser(@RequestBody UserDto userDto){
        return new ResponseEntity(service.createUser(userDto), HttpStatus.CREATED);
    }

    @GetMapping("{id}")
    public ResponseEntity<UserDto> getMyUser(@PathVariable("id") Long id){
        return new ResponseEntity(service.getUserById(id), HttpStatus.OK);
    }

    @GetMapping
    public ResponseEntity<List<UserDto>> getAllMyUsers(){
        return new ResponseEntity(service.getAllUsers(), HttpStatus.OK);
    }


    @PutMapping("{id}")
    public ResponseEntity<UserDto> updateMyUser(@PathVariable("id") Long id, @RequestBody UserDto userDto){
        UserDto updatedUserDto = service.updateUser(id, userDto);
        System.out.println(updatedUserDto);
        return new ResponseEntity(updatedUserDto, HttpStatus.OK);
    }

    @DeleteMapping("{id}")
    public ResponseEntity<String> deleteMyUser(@PathVariable("id") Long id){
        return new ResponseEntity(service.deleteUser(id), HttpStatus.OK);
    }


    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorDetails> handleResourceNotFoundException(ResourceNotFoundException exception,
                                                                        WebRequest request){
        ErrorDetails errorDetails = new ErrorDetails(
                LocalDateTime.now(),
                exception.getMessage(),
                request.getDescription(false),
                "USER NOT FOUND CODE"
        );
        return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
    }

}




Step 4 :
package com.example.restservices.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorDetails> handleResourceNotFoundException(ResourceNotFoundException exception,
                                                                        WebRequest request){
        ErrorDetails errorDetails = new ErrorDetails(
                LocalDateTime.now(),
                exception.getMessage(),
                request.getDescription(false),
                "USER NOT FOUND CODE"
        );
        return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
    }


    @ExceptionHandler(EmailAlreadyExistsException.class)
    public ResponseEntity<ErrorDetails> handleEmailAlreadyExistsException(EmailAlreadyExistsException exception,
                                                                        WebRequest request){
        ErrorDetails errorDetails = new ErrorDetails(
                LocalDateTime.now(),
                exception.getMessage(),
                request.getDescription(false),
                "EmailAlreadyExistsException CODE"
        );
        return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
    }

}

Step 5 : 
package com.example.restservices.exception;


import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class EmailAlreadyExistsException extends RuntimeException{
    private String message;
    public EmailAlreadyExistsException(String message){
        super(message);
    }
}
