Step1 :Copy Dependency and Plugin compatible with Lombok:
https://mapstruct.org/documentation/installation/

https://github.com/mapstruct/mapstruct-examples/blob/main/mapstruct-lombok/pom.xml


Step 2:

package com.example.restservices.mapper;

import com.example.restservices.dto.UserDto;
import com.example.restservices.entity.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

@Mapper
public interface AutoUserMapper {

    AutoUserMapper MAPPER = Mappers.getMapper(AutoUserMapper.class);
//    @Mapping(source = "emailAddr", target = "email")
    UserDto mapToUserDto(User user);
    User mapToUser(UserDto userDto);

}





Step 3: 
package com.example.restservices.service.impl;

import com.example.restservices.dto.UserDto;
import com.example.restservices.entity.User;
import com.example.restservices.mapper.AutoUserMapper;
import com.example.restservices.mapper.UserMapper;
import com.example.restservices.repo.UserRepo;
import com.example.restservices.service.UserService;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


@Service
@AllArgsConstructor
public class UserServiceImpl implements UserService {
    private UserRepo repo;
//    private ModelMapper mapper;


    @Override
    public UserDto createUser(UserDto userDto) {
        //UserDto to User JPA Entity
        //User user = UserMapper.mapToUser(userDto);
        //User user = mapper.map(userDto, User.class);
        User user = AutoUserMapper.MAPPER.mapToUser(userDto);

        User savedUser = repo.save(user);
        //User to UserDto JPA Entity
        //UserDto userDto1 = UserMapper.mapToUserDto(savedUser);
        //UserDto userDto1 = mapper.map(savedUser, UserDto.class);
        UserDto userDto1 = AutoUserMapper.MAPPER.mapToUserDto(savedUser);
        return userDto1;
    }

    @Override
    public UserDto getUserById(Long id) {
        User user =  repo.findById(id).get();
//      UserDto userDto = UserMapper.mapToUserDto(user);
//        UserDto userDto = mapper.map(user, UserDto.class);
        UserDto userDto = AutoUserMapper.MAPPER.mapToUserDto(user);
        return userDto;
    }

    @Override
    public List<UserDto> getAllUsers() {
        List<User> list = repo.findAll();
        List<UserDto> listdto = list.stream()
//                .map((user) -> mapper.map(user, UserDto.class))
                .map((user) -> AutoUserMapper.MAPPER.mapToUserDto(user))
                .collect(Collectors.toList());
        return listdto;
    }

    @Override
    public UserDto updateUser(Long id, UserDto userDto) {
        User savedUser =  repo.findById(id).get();
        savedUser.setFname(userDto.getFname());
        savedUser.setLname(userDto.getLname());
        savedUser.setEmail(userDto.getEmail());

//      UserDto savedDto = UserMapper.mapToUserDto(savedUser);
//        UserDto savedDto = mapper.map(savedUser, UserDto.class);
        UserDto savedDto = AutoUserMapper.MAPPER.mapToUserDto(savedUser);

        return savedDto;
    }

    @Override
    public String deleteUser(Long id) {
        repo.deleteById(id);
        return "User Successfully Deleted";
    }


}
